{"remainingRequest":"/Users/ttss/respository/nature language/chatroom/web/node_modules/babel-loader/lib/index.js!/Users/ttss/respository/nature language/chatroom/web/src/utils/request.js","dependencies":[{"path":"/Users/ttss/respository/nature language/chatroom/web/src/utils/request.js","mtime":1597310728000},{"path":"/Users/ttss/respository/nature language/chatroom/web/node_modules/cache-loader/dist/cjs.js","mtime":1677266736571},{"path":"/Users/ttss/respository/nature language/chatroom/web/node_modules/babel-loader/lib/index.js","mtime":1677266736718}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgTm90aWZ5IH0gZnJvbSAndmFudCc7IC8vIGNyZWF0ZSBhbiBheGlvcyBpbnN0YW5jZQoKY29uc3Qgc2VydmljZSA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogJ2h0dHA6Ly8xOTIuMTY4LjMxLjI1OjgwMDAnLAogIC8vIHVybCA9IGJhc2UgdXJsICsgcmVxdWVzdCB1cmwKICAvLyB3aXRoQ3JlZGVudGlhbHM6IHRydWUsIC8vIHNlbmQgY29va2llcyB3aGVuIGNyb3NzLWRvbWFpbiByZXF1ZXN0cwogIHRpbWVvdXQ6IDUwMDAgLy8gcmVxdWVzdCB0aW1lb3V0Cgp9KTsgLy8gcmVxdWVzdCBpbnRlcmNlcHRvcgoKc2VydmljZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoY29uZmlnID0+IHsKICAvLyBkbyBzb21ldGhpbmcgYmVmb3JlIHJlcXVlc3QgaXMgc2VudAogIGxldCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpOwoKICBpZiAodG9rZW4pIHsKICAgIC8vIGxldCBlYWNoIHJlcXVlc3QgY2FycnkgdG9rZW4KICAgIC8vIFsnWC1Ub2tlbiddIGlzIGEgY3VzdG9tIGhlYWRlcnMga2V5CiAgICAvLyBwbGVhc2UgbW9kaWZ5IGl0IGFjY29yZGluZyB0byB0aGUgYWN0dWFsIHNpdHVhdGlvbgogICAgY29uZmlnLmhlYWRlcnNbJ1gtVG9rZW4nXSA9IHRva2VuOwogIH0KCiAgcmV0dXJuIGNvbmZpZzsKfSwgZXJyb3IgPT4gewogIC8vIGRvIHNvbWV0aGluZyB3aXRoIHJlcXVlc3QgZXJyb3IKICBjb25zb2xlLmxvZyhlcnJvcik7IC8vIGZvciBkZWJ1ZwoKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsgLy8gcmVzcG9uc2UgaW50ZXJjZXB0b3IKCnNlcnZpY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShyZXNwb25zZSA9PiB7CiAgY29uc3QgcmVzID0gcmVzcG9uc2UuZGF0YTsgLy8gaWYgdGhlIGN1c3RvbSBjb2RlIGlzIG5vdCAyMDAwMCwgaXQgaXMganVkZ2VkIGFzIGFuIGVycm9yLgoKICBpZiAocmVzLnN0YXR1cyA9PT0gZmFsc2UpIHsKICAgIGlmIChyZXMubWVzc2FnZSkgewogICAgICBOb3RpZnkoewogICAgICAgIG1lc3NhZ2U6IHJlcy5tZXNzYWdlLAogICAgICAgIGNvbG9yOiAnI0ZGRkZGRicsCiAgICAgICAgYmFja2dyb3VuZDogJyNkOTQ1NWYnCiAgICAgIH0pOwogICAgfQogIH0gZWxzZSB7CiAgICBpZiAocmVzLm1lc3NhZ2UpIHsKICAgICAgTm90aWZ5KHsKICAgICAgICBtZXNzYWdlOiByZXMubWVzc2FnZSwKICAgICAgICBjb2xvcjogJyNGRkZGRkYnLAogICAgICAgIGJhY2tncm91bmQ6ICcjMWViMmE2JwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gcmVzOwogIH0KfSwgZXJyb3IgPT4gewogIGNvbnNvbGUubG9nKGVycm9yKTsgLy8gZm9yIGRlYnVnCgogIE5vdGlmeSh7CiAgICBtZXNzYWdlOiAnZXJyb3InLAogICAgY29sb3I6ICcjRkZGRkZGJywKICAgIGJhY2tncm91bmQ6ICcjZDk0NTVmJwogIH0pOwogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOwpleHBvcnQgZGVmYXVsdCBzZXJ2aWNlOw=="},{"version":3,"sources":["/Users/ttss/respository/nature language/chatroom/web/src/utils/request.js"],"names":["axios","Notify","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","console","log","Promise","reject","response","res","data","status","message","color","background"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,MAArB,C,CAGA;;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,2BADgB;AACa;AACtC;AACAC,EAAAA,OAAO,EAAE,IAHgB,CAGX;;AAHW,CAAb,CAAhB,C,CAMA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACIC,MAAM,IAAI;AACN;AACA,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAIF,KAAJ,EAAW;AACP;AACA;AACA;AACAD,IAAAA,MAAM,CAACI,OAAP,CAAe,SAAf,IAA4BH,KAA5B;AACH;;AACD,SAAOD,MAAP;AACH,CAXL,EAYIK,KAAK,IAAI;AACL;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFK,CAEc;;AACnB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAhBL,E,CAmBA;;AACAZ,OAAO,CAACI,YAAR,CAAqBa,QAArB,CAA8BX,GAA9B,CACIW,QAAQ,IAAI;AACR,QAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB,CADQ,CAER;;AACA,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACtB,QAAIF,GAAG,CAACG,OAAR,EAAiB;AACbtB,MAAAA,MAAM,CAAC;AACHsB,QAAAA,OAAO,EAAEH,GAAG,CAACG,OADV;AAEHC,QAAAA,KAAK,EAAE,SAFJ;AAGHC,QAAAA,UAAU,EAAE;AAHT,OAAD,CAAN;AAKH;AACJ,GARD,MAQO;AACH,QAAIL,GAAG,CAACG,OAAR,EAAiB;AACbtB,MAAAA,MAAM,CAAC;AACHsB,QAAAA,OAAO,EAAEH,GAAG,CAACG,OADV;AAEHC,QAAAA,KAAK,EAAE,SAFJ;AAGHC,QAAAA,UAAU,EAAE;AAHT,OAAD,CAAN;AAKH;;AACD,WAAOL,GAAP;AACH;AACJ,CAtBL,EAuBIN,KAAK,IAAI;AACLC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADK,CACc;;AACnBb,EAAAA,MAAM,CAAC;AACHsB,IAAAA,OAAO,EAAE,OADN;AAEHC,IAAAA,KAAK,EAAE,SAFJ;AAGHC,IAAAA,UAAU,EAAE;AAHT,GAAD,CAAN;AAKA,SAAOR,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CA/BL;AAkCA,eAAeZ,OAAf","sourcesContent":["import axios from 'axios'\nimport {Notify} from 'vant'\n\n\n// create an axios instance\nconst service = axios.create({\n    baseURL: 'http://192.168.31.25:8000', // url = base url + request url\n    // withCredentials: true, // send cookies when cross-domain requests\n    timeout: 5000 // request timeout\n})\n\n// request interceptor\nservice.interceptors.request.use(\n    config => {\n        // do something before request is sent\n        let token = localStorage.getItem('token')\n        if (token) {\n            // let each request carry token\n            // ['X-Token'] is a custom headers key\n            // please modify it according to the actual situation\n            config.headers['X-Token'] = token\n        }\n        return config\n    },\n    error => {\n        // do something with request error\n        console.log(error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n// response interceptor\nservice.interceptors.response.use(\n    response => {\n        const res = response.data\n        // if the custom code is not 20000, it is judged as an error.\n        if (res.status === false) {\n            if (res.message) {\n                Notify({\n                    message: res.message,\n                    color: '#FFFFFF',\n                    background: '#d9455f',\n                });\n            }\n        } else {\n            if (res.message) {\n                Notify({\n                    message: res.message,\n                    color: '#FFFFFF',\n                    background: '#1eb2a6',\n                });\n            }\n            return res\n        }\n    },\n    error => {\n        console.log(error) // for debug\n        Notify({\n            message: 'error',\n            color: '#FFFFFF',\n            background: '#d9455f',\n        });\n        return Promise.reject(error)\n    }\n)\n\nexport default service"]}]}